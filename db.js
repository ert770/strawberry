const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const fs = require('fs');

// 確保 db 目錄存在
const dbDir = path.join(__dirname, 'db');
if (!fs.existsSync(dbDir)){
    fs.mkdirSync(dbDir);
}

const dbPath = path.join(__dirname, 'db', 'sqlite.db');
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('數據庫連接失敗:', err.message);
    } else {
        console.log('成功連接到數據庫');
        initializeDatabase();
    }
});

function initializeDatabase() {
    const createTableSQL = `
        CREATE TABLE IF NOT EXISTS market_prices (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date DATE NOT NULL,
            market VARCHAR(50) NOT NULL,
            product VARCHAR(100) NOT NULL,
            high_price DECIMAL(10,2),
            medium_price DECIMAL(10,2),
            low_price DECIMAL(10,2),
            average_price DECIMAL(10,2),
            trading_volume DECIMAL(12,2),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    `;

    const createIndexesSQL = [
        'CREATE INDEX IF NOT EXISTS idx_market_prices_date ON market_prices(date)',
        'CREATE INDEX IF NOT EXISTS idx_market_prices_market ON market_prices(market)',
        'CREATE INDEX IF NOT EXISTS idx_market_prices_product ON market_prices(product)'
    ];

    // 創建表格
    db.run(createTableSQL, (err) => {
        if (err) {
            console.error('創建表格失敗:', err.message);
            return;
        }
        console.log('market_prices 表格已創建或已存在');

        // 創建索引
        createIndexesSQL.forEach(indexSQL => {
            db.run(indexSQL, (err) => {
                if (err) {
                    console.error('創建索引失敗:', err.message);
                }
            });
        });

        // 插入初始數據
        insertInitialData();
    });
}

function insertInitialData() {
    const data = [
        ["2011-11-09", "400 台中市", "45 草莓", 250, 200, 150, 210, 100],
        ["2011-11-13", "400 台中市", "45 草莓", 220, 200, 150, 198, 100],
        ["2011-11-16", "400 台中市", "45 草莓", 222.5, 180, 135, 179.2, 130],
        ["2011-11-17", "400 台中市", "45 草莓", 220, 200, 120, 180, 60],
        ["2011-11-18", "400 台中市", "45 草莓", 220, 200, 150, 204.3, 140],
        ["2011-11-19", "400 台中市", "45 草莓", 200, 175, 150, 183.3, 180],
        ["2011-11-20", "400 台中市", "45 草莓", 250, 183.3, 150, 196.4, 280],
        ["2011-11-22", "400 台中市", "45 草莓", 250, 225, 175, 217.7, 434],
        ["2011-11-23", "400 台中市", "45 草莓", 250, 200, 150, 183.9, 280],
        ["2011-11-24", "400 台中市", "45 草莓", 205, 176, 125, 185.6, 494],
        ["2011-11-25", "400 台中市", "45 草莓", 225, 175, 125, 190.6, 704],
        ["2011-11-26", "400 台中市", "45 草莓", 225, 180, 110, 185.7, 530],
        ["2011-11-27", "400 台中市", "45 草莓", 193.3, 140, 100, 165.3, 626],
        ["2011-11-29", "400 台中市", "45 草莓", 181.7, 148.3, 100, 162.6, 1076],
        ["2011-11-30", "400 台中市", "45 草莓", 213.3, 163, 100, 149.7, 1178],
        ["2011-12-01", "400 台中市", "45 草莓", 187.5, 133, 85, 138.1, 1118],
        ["2011-12-02", "400 台中市", "45 草莓", 172.5, 146.2, 85, 140.1, 932],
        ["2011-12-03", "400 台中市", "45 草莓", 206.7, 148.6, 80, 141.1, 1454],
        ["2011-12-04", "400 台中市", "45 草莓", 150, 125, 85, 128.8, 1220],
        ["2011-12-06", "400 台中市", "45 草莓", 156.7, 128.8, 70, 123.4, 1356],
        ["2011-12-07", "400 台中市", "45 草莓", 200, 127.8, 80, 123.6, 1680],
        ["2011-12-08", "400 台中市", "45 草莓", 148.3, 112, 70, 108.2, 1598],
        ["2011-12-09", "400 台中市", "45 草莓", 148.3, 109, 70, 112.9, 1914],
        ["2011-12-10", "400 台中市", "45 草莓", 275, 125, 70, 117.6, 1964],
        ["2011-12-11", "400 台中市", "45 草莓", 131.7, 102, 70, 103.5, 2640],
        ["2011-12-13", "400 台中市", "45 草莓", 127, 101.3, 58, 102.1, 2694],
        ["2011-12-14", "400 台中市", "45 草莓", 226.2, 113.8, 65, 120.3, 1282],
        ["2011-12-15", "400 台中市", "45 草莓", 121.7, 105.7, 50, 98.4, 1656],
        ["2011-12-16", "400 台中市", "45 草莓", 115, 81.4, 50, 78.6, 1720],
        ["2011-12-17", "400 台中市", "45 草莓", 215, 95.6, 55, 97.4, 1916],
        ["2011-12-18", "400 台中市", "45 草莓", 121.7, 103.3, 56.7, 100.6, 1758],
        ["2011-12-20", "400 台中市", "45 草莓", 126, 100.9, 50, 97.7, 3254],
        ["2011-12-21", "400 台中市", "45 草莓", 130, 104, 50, 100.7, 2638],
        ["2011-12-22", "400 台中市", "45 草莓", 130, 104, 50, 102, 2380],
        ["2011-12-23", "400 台中市", "45 草莓", 128.8, 101.2, 55, 101.3, 2264],
        ["2011-12-24", "400 台中市", "45 草莓", 211.2, 98.3, 50, 108.5, 3264],
        ["2011-12-25", "400 台中市", "45 草莓", 127, 96.7, 50, 100.9, 2838],
        ["2011-12-27", "400 台中市", "45 草莓", 117.5, 88.9, 50, 83.8, 3360],
        ["2011-12-28", "400 台中市", "45 草莓", 142.5, 97.3, 55, 90.6, 2388],
        ["2011-12-29", "400 台中市", "45 草莓", 127.5, 85, 50, 89.5, 2416],
        ["2011-12-30", "400 台中市", "45 草莓", 127.5, 98.6, 50, 98.8, 2318],
        ["2011-12-31", "400 台中市", "45 草莓", 131.2, 101.2, 65, 108, 2290],
        ["2012-01-01", "400 台中市", "45 草莓", 129, 100.8, 50, 100.7, 4126],
        ["2012-01-03", "400 台中市", "45 草莓", 127.5, 103.8, 53.3, 99.9, 4354],
        ["2012-01-04", "400 台中市", "45 草莓", 131.2, 108.5, 55, 105.5, 2146]
    ];

    const insertSQL = `
        INSERT INTO market_prices (
            date, market, product, 
            high_price, medium_price, low_price, 
            average_price, trading_volume
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    `;

    db.serialize(() => {
        const stmt = db.prepare(insertSQL);

        data.forEach(row => {
            stmt.run(row, (err) => {
                if (err) {
                    console.error('插入數據失敗:', err.message);
                }
            });
        });

        stmt.finalize();
        console.log('初始數據已插入');
    });
}

// 匯出數據庫連接
module.exports = db;
